(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('web3-utils'), require('mobx')) :
    typeof define === 'function' && define.amd ? define(['web3-utils', 'mobx'], factory) :
    (global['@userfeeds/web3-store'] = factory(global.utils,global.mobx));
}(this, (function (utils,mobx) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [0, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    var networkMapping = {
        1: 'ethereum',
        3: 'ropsten',
        4: 'rinkeby',
        42: 'kovan',
    };
    function getCurrentNetworkName(web3Instance) {
        return __awaiter(this, void 0, void 0, function () {
            var networkId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        throwIfNotConnected(web3Instance);
                        return [4 /*yield*/, web3Instance.eth.net.getId()];
                    case 1:
                        networkId = _a.sent();
                        return [2 /*return*/, networkMapping[networkId]];
                }
            });
        });
    }
    function getAccounts(web3Instance) {
        throwIfNotConnected(web3Instance);
        return web3Instance.eth.getAccounts();
    }
    function throwIfNotConnected(web3Instance) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, web3Instance.eth.net.isListening()];
                    case 1:
                        if (!(_a.sent())) {
                            throw Error('web3 is not connected');
                        }
                        return [2 /*return*/];
                }
            });
        });
    }

    var BN = utils.BN;
    var MAX_VALUE_256 = new BN(2)
        .pow(new BN(256))
        .subn(1)
        .toString(10);
    var fromWeiToString = function (wei, decimals, decimalFigures) {
        if (decimalFigures === void 0) { decimalFigures = 3; }
        var counter = new BN(typeof wei === 'number' ? wei.toFixed(0) : wei);
        if (counter.eqn(0)) {
            return '0';
        }
        var divider = new BN(10).pow(new BN(decimals));
        var div = new BN(counter).div(divider).toString(10);
        var mod = new BN(counter)
            .mod(divider)
            .toString(10, decimals)
            .slice(0, decimalFigures);
        return div + "." + mod;
    };
    var toWei = function (amout, decimals) {
        var parsedDecimals = typeof decimals !== 'number'
            ? parseInt(decimals, 10) // ToDo check this casting
            : decimals;
        var multiplier = new BN(10).pow(new BN(parsedDecimals));
        var _a = amout.toString().split('.'), integral = _a[0], _b = _a[1], rawFraction = _b === void 0 ? '' : _b;
        var fraction = rawFraction.padEnd(parsedDecimals, '0').slice(0, parsedDecimals);
        return new BN(integral)
            .mul(multiplier)
            .add(new BN(fraction))
            .toString(10);
    };

    var withoutValueTransferContractAddressMapping = {
        ethereum: '0xFd74f0ce337fC692B8c124c094c1386A14ec7901',
        rinkeby: '0xC5De286677AC4f371dc791022218b1c13B72DbBd',
        ropsten: '0x6f32a6F579CFEed1FFfDc562231C957ECC894001',
        kovan: '0x139d658eD55b78e783DbE9bD4eb8F2b977b24153',
    };
    var valueTransferContractAddressMapping = {
        ethereum: '0x70B610F7072E742d4278eC55C02426Dbaaee388C',
        rinkeby: '0x00034B8397d9400117b4298548EAa59267953F8c',
        ropsten: '0x37C1CA7996CDdAaa31e13AA3eEE0C89Ee4f665B5',
        kovan: '0xc666c75C2bBA9AD8Df402138cE32265ac0EC7aaC',
    };
    var tokenTransferContractAddressMapping = {
        ethereum: '0xfF8A1BA752fE5df494B02D77525EC6Fa76cecb93',
        rinkeby: '0xBd2A0FF74dE98cFDDe4653c610E0E473137534fB',
        ropsten: '0x54b4372fA0bd76664B48625f0e8c899Ff19DFc39',
        kovan: '0xd6Ede7F43882B100C6311a9dF801088eA91cEb64',
    };
    function getContractWithoutValueTransfer(web3Instance, networkName) {
        var contractAddress = withoutValueTransferContractAddressMapping[networkName];
        if (!contractAddress) {
            throw new Error('Contract is not available');
        }
        var contract = new web3Instance.eth.Contract(withoutValueTransferAbi, contractAddress);
        contract.setProvider(web3Instance.currentProvider); // ToDo because of bug in web3 1.0.0-beta26
        return contract;
    }
    var withoutValueTransferAbi = [
        {
            constant: false,
            inputs: [{ name: 'data', type: 'string' }],
            name: 'post',
            outputs: [],
            payable: false,
            type: 'function',
        },
    ];
    function getContractValueTransfer(web3Instance, networkName) {
        var contractAddress = valueTransferContractAddressMapping[networkName];
        if (!contractAddress) {
            throw new Error('Contract is not available');
        }
        var contract = new web3Instance.eth.Contract(valueTransferAbi, contractAddress);
        contract.setProvider(web3Instance.currentProvider); // ToDo because of bug in web3 1.0.0-beta26
        return contract;
    }
    var valueTransferAbi = [
        {
            constant: false,
            inputs: [{ name: 'userfeed', type: 'address' }, { name: 'data', type: 'string' }],
            name: 'post',
            outputs: [],
            payable: true,
            type: 'function',
        },
    ];
    function getContractTokenTransfer(web3Instance, networkName) {
        var contractAddress = tokenTransferContractAddressMapping[networkName];
        if (!contractAddress) {
            throw new Error('Contract is not available');
        }
        var contract = new web3Instance.eth.Contract(tokenTransferAbi, contractAddress);
        contract.setProvider(web3Instance.currentProvider); // ToDo because of bug in web3 1.0.0-beta26
        return contract;
    }
    function getContractTokenTransferAddress(networkName) {
        var contractAddress = tokenTransferContractAddressMapping[networkName];
        if (!contractAddress) {
            throw new Error('Contract is not available');
        }
        return contractAddress;
    }
    var tokenTransferAbi = [
        {
            constant: false,
            inputs: [
                { name: 'userfeed', type: 'address' },
                { name: 'token', type: 'address' },
                { name: 'value', type: 'uint256' },
                { name: 'data', type: 'string' },
            ],
            name: 'post',
            outputs: [],
            payable: false,
            type: 'function',
        },
    ];
    function getErc20Contract(web3Instance, contractAddress) {
        var contract = new web3Instance.eth.Contract(erc20abi, contractAddress);
        contract.setProvider(web3Instance.currentProvider); // ToDo because of bug in web3 1.0.0-beta26
        return contract;
    }
    var erc20abi = [
        {
            constant: false,
            inputs: [{ name: '_spender', type: 'address' }, { name: '_value', type: 'uint256' }],
            name: 'approve',
            outputs: [{ name: 'success', type: 'bool' }],
            payable: false,
            type: 'function',
        },
        {
            constant: true,
            inputs: [{ name: '_owner', type: 'address' }, { name: '_spender', type: 'address' }],
            name: 'allowance',
            outputs: [{ name: '', type: 'uint256' }],
            payable: false,
            type: 'function',
        },
        {
            constant: true,
            inputs: [{ name: '_owner', type: 'address' }],
            name: 'balanceOf',
            outputs: [{ name: '', type: 'uint256' }],
            payable: false,
            type: 'function',
        },
        {
            constant: true,
            inputs: [],
            name: 'decimals',
            outputs: [{ name: '', type: 'uint8' }],
            payable: false,
            type: 'function',
        },
        {
            constant: true,
            inputs: [],
            name: 'name',
            outputs: [{ name: '', type: 'string' }],
            payable: false,
            type: 'function',
        },
        {
            constant: true,
            inputs: [],
            name: 'symbol',
            outputs: [{ name: '', type: 'string' }],
            payable: false,
            type: 'function',
        },
    ];

    function erc20ContractApprove(web3Instance, contractAddress, spender, value) {
        return __awaiter(this, void 0, void 0, function () {
            var from, contract;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getAccounts(web3Instance)];
                    case 1:
                        from = (_a.sent())[0];
                        contract = getErc20Contract(web3Instance, contractAddress);
                        return [2 /*return*/, {
                                promiEvent: contract.methods.approve(spender, value).send({ from: from }),
                            }];
                }
            });
        });
    }
    function erc20ContractDecimals(web3Instance, contractAddress) {
        var contract = getErc20Contract(web3Instance, contractAddress);
        return contract.methods.decimals().call();
    }

    function sendClaimWithoutValueTransfer(web3Instance, claim) {
        return __awaiter(this, void 0, void 0, function () {
            var networkName, from, contract;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getCurrentNetworkName(web3Instance)];
                    case 1:
                        networkName = _a.sent();
                        return [4 /*yield*/, getAccounts(web3Instance)];
                    case 2:
                        from = (_a.sent())[0];
                        contract = getContractWithoutValueTransfer(web3Instance, networkName);
                        return [2 /*return*/, {
                                promiEvent: contract.methods.post(JSON.stringify(claim)).send({ from: from }),
                            }];
                }
            });
        });
    }
    function sendClaimValueTransfer(web3Instance, address, value, claim) {
        return __awaiter(this, void 0, void 0, function () {
            var networkName, from, contract;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getCurrentNetworkName(web3Instance)];
                    case 1:
                        networkName = _a.sent();
                        return [4 /*yield*/, getAccounts(web3Instance)];
                    case 2:
                        from = (_a.sent())[0];
                        contract = getContractValueTransfer(web3Instance, networkName);
                        return [2 /*return*/, {
                                promiEvent: contract.methods.post(address, JSON.stringify(claim)).send({ from: from, value: toWei(value, 18) }),
                            }];
                }
            });
        });
    }
    function approveUserfeedsContractTokenTransfer(web3Instance, tokenContractAddress, value) {
        return __awaiter(this, void 0, void 0, function () {
            var networkName, spenderContractAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getCurrentNetworkName(web3Instance)];
                    case 1:
                        networkName = _a.sent();
                        spenderContractAddress = getContractTokenTransferAddress(networkName);
                        return [2 /*return*/, erc20ContractApprove(web3Instance, tokenContractAddress, spenderContractAddress, value)];
                }
            });
        });
    }
    function sendClaimTokenTransferImpl(web3Instance, address, token, value, claim) {
        return __awaiter(this, void 0, void 0, function () {
            var networkName, from, contract;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getCurrentNetworkName(web3Instance)];
                    case 1:
                        networkName = _a.sent();
                        return [4 /*yield*/, getAccounts(web3Instance)];
                    case 2:
                        from = (_a.sent())[0];
                        contract = getContractTokenTransfer(web3Instance, networkName);
                        return [2 /*return*/, {
                                promiEvent: contract.methods.post(address, token, value, JSON.stringify(claim)).send({ from: from }),
                            }];
                }
            });
        });
    }
    function sendClaimTokenTransfer(web3Instance, recipientAddress, token, value, claim) {
        return __awaiter(this, void 0, void 0, function () {
            var decimals, tokenWei;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, erc20ContractDecimals(web3Instance, token)];
                    case 1:
                        decimals = _a.sent();
                        tokenWei = toWei(value, decimals);
                        return [2 /*return*/, sendClaimTokenTransferImpl(web3Instance, recipientAddress, token, tokenWei, claim)];
                }
            });
        });
    }

    var BN$1 = utils.BN;
    var Web3Store = /** @class */ (function () {
        function Web3Store(injectedWeb3, Erc20Ctor, widgetSettings, initialState) {
            if (initialState === void 0) { initialState = {
                currentProvider: undefined,
                isListening: undefined,
                allowance: undefined,
            }; }
            var _this = this;
            this.injectedWeb3 = injectedWeb3;
            this.Erc20Ctor = Erc20Ctor;
            this.widgetSettings = widgetSettings;
            this.sendTokenClaim = function (claim, recipientAddress, value) {
                if (value === undefined) {
                    return sendClaimWithoutValueTransfer(_this.injectedWeb3, claim);
                }
                else {
                    return sendClaimTokenTransfer(_this.injectedWeb3, recipientAddress, _this.token, value, claim);
                }
            };
            this.sendEthereumClaim = function (claim, recipientAddress, value) {
                if (value === undefined) {
                    return sendClaimWithoutValueTransfer(_this.injectedWeb3, claim);
                }
                else {
                    return sendClaimValueTransfer(_this.injectedWeb3, recipientAddress, value, claim);
                }
            };
            this.shouldApprove = function (value) {
                return !!_this.token && new BN$1(_this.allowance).lt(new BN$1(value));
            };
            this.approve = function (value) {
                return approveUserfeedsContractTokenTransfer(_this.injectedWeb3, _this.token, value);
            };
            this.currentProvider = initialState.currentProvider;
            this.isListening = initialState.isListening;
            this.injectedWeb3ActiveNetwork = initialState.injectedWeb3ActiveNetwork;
            this.allowance = initialState.allowance;
            this.decimals = initialState.decimals;
            this.balance = initialState.balance;
            this.startUpdatingInjectedWeb3State();
            this.startUpdatingTokenDetails();
        }
        Web3Store.prototype.startUpdatingInjectedWeb3State = function () {
            this.updateInjectedWeb3State();
            clearInterval(this.updateInjectedWeb3StateIntervalId);
            this.updateInjectedWeb3StateIntervalId = setInterval(this.updateInjectedWeb3State, 1000);
        };
        Web3Store.prototype.startUpdatingTokenDetails = function () {
            this.updateTokenDetails();
            clearInterval(this.updateTokenDetailsIntervalId);
            this.updateTokenDetailsIntervalId = setInterval(this.updateTokenDetails, 1000);
        };
        Web3Store.prototype.stopUpdating = function () {
            clearInterval(this.updateInjectedWeb3StateIntervalId);
            clearInterval(this.updateTokenDetailsIntervalId);
        };
        Web3Store.prototype.tokenRequests = function () {
            if (this.token) {
                return [
                    this.erc20.decimals(),
                    this.erc20.symbol(),
                    this.erc20.name(),
                    this.unlocked ? this.erc20.balance() : undefined,
                    this.unlocked ? this.erc20.allowance() : undefined,
                ];
            }
            else {
                return [
                    18,
                    'ETH',
                    'ETH',
                    this.unlocked ? this.injectedWeb3.eth.getBalance(this.currentAccount) : undefined,
                    undefined,
                ];
            }
        };
        Web3Store.prototype.updateTokenDetails = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, decimals, symbol, name, balance, allowance;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, Promise.all(this.tokenRequests())];
                        case 1:
                            _a = _b.sent(), decimals = _a[0], symbol = _a[1], name = _a[2], balance = _a[3], allowance = _a[4];
                            this.decimals = decimals;
                            this.symbol = symbol;
                            this.name = name;
                            this.balance = balance;
                            this.allowance = allowance;
                            return [2 /*return*/];
                    }
                });
            });
        };
        Web3Store.prototype.updateInjectedWeb3State = function () {
            return __awaiter(this, void 0, void 0, function () {
                var currentBlock_1, _a, isListening, networkId, accounts, currentBlock, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.currentProvider = this.injectedWeb3.currentProvider;
                            if (!!this.currentProvider) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.erc20.currentBlock()];
                        case 1:
                            currentBlock_1 = _c.sent();
                            this.blockNumber = currentBlock_1;
                            return [2 /*return*/];
                        case 2: return [4 /*yield*/, Promise.all([
                                this.injectedWeb3.eth.net.isListening(),
                                this.injectedWeb3.eth.net.getId(),
                                this.injectedWeb3.eth.getAccounts(),
                                this.injectedWeb3.eth.getBlockNumber(),
                            ])];
                        case 3:
                            _a = _c.sent(), isListening = _a[0], networkId = _a[1], accounts = _a[2], currentBlock = _a[3];
                            this.isListening = isListening;
                            this.injectedWeb3ActiveNetwork = networkMapping[networkId];
                            this.currentAccount = accounts[0];
                            if (!(this.network === this.injectedWeb3ActiveNetwork)) return [3 /*break*/, 4];
                            this.blockNumber = currentBlock;
                            return [3 /*break*/, 6];
                        case 4:
                            _b = this;
                            return [4 /*yield*/, this.erc20.currentBlock()];
                        case 5:
                            _b.blockNumber = _c.sent();
                            _c.label = 6;
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        Object.defineProperty(Web3Store.prototype, "erc20", {
            get: function () {
                return new this.Erc20Ctor(this.network, this.token, this.currentAccount);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Web3Store.prototype, "activeNetwork", {
            get: function () {
                return this.ready ? this.injectedWeb3ActiveNetwork : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Web3Store.prototype, "reason", {
            get: function () {
                if (!this.currentProvider) {
                    return 'Install Metamask to unlock all the features';
                }
                else if (!this.currentAccount) {
                    return 'Unlock your wallet to unlock all the features';
                }
                else if (this.activeNetwork !== this.network && this.network !== 'http') {
                    return "Switch to " + this.network + " network to unlock all the features";
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Web3Store.prototype, "unlocked", {
            get: function () {
                return !!(this.ready && this.currentAccount);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Web3Store.prototype, "ready", {
            get: function () {
                return !!(this.currentProvider && this.isListening);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Web3Store.prototype, "network", {
            get: function () {
                return this.widgetSettings.asset.split(':')[0];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Web3Store.prototype, "token", {
            get: function () {
                return this.widgetSettings.asset.split(':')[1];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Web3Store.prototype, "balanceWithDecimalPoint", {
            get: function () {
                return this.balance !== null && this.balance !== undefined
                    ? fromWeiToString(this.balance, this.decimals)
                    : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Web3Store.prototype, "allowanceWithDecimalPoint", {
            get: function () {
                return this.allowance !== null && this.allowance !== undefined
                    ? fromWeiToString(this.allowance, this.decimals)
                    : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Web3Store.prototype, "sendClaim", {
            get: function () {
                return this.token ? this.sendTokenClaim : this.sendEthereumClaim;
            },
            enumerable: true,
            configurable: true
        });
        Web3Store.prototype.transactionReceipt = function (transactionHash) {
            return __awaiter(this, void 0, void 0, function () {
                var response, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.injectedWeb3.eth.getTransactionReceipt(transactionHash)];
                        case 1:
                            response = _a.sent();
                            return [2 /*return*/, response];
                        case 2:
                            e_1 = _a.sent();
                            return [2 /*return*/, undefined];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        Object.defineProperty(Web3Store.prototype, "getTransactionReceipt", {
            get: function () {
                return this.ready && this.network === this.injectedWeb3ActiveNetwork
                    ? this.transactionReceipt
                    : this.erc20.transactionReceipt;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            mobx.observable
        ], Web3Store.prototype, "currentProvider", void 0);
        __decorate([
            mobx.observable
        ], Web3Store.prototype, "isListening", void 0);
        __decorate([
            mobx.observable
        ], Web3Store.prototype, "injectedWeb3ActiveNetwork", void 0);
        __decorate([
            mobx.observable
        ], Web3Store.prototype, "currentAccount", void 0);
        __decorate([
            mobx.observable
        ], Web3Store.prototype, "blockNumber", void 0);
        __decorate([
            mobx.observable
        ], Web3Store.prototype, "decimals", void 0);
        __decorate([
            mobx.observable
        ], Web3Store.prototype, "symbol", void 0);
        __decorate([
            mobx.observable
        ], Web3Store.prototype, "name", void 0);
        __decorate([
            mobx.observable
        ], Web3Store.prototype, "balance", void 0);
        __decorate([
            mobx.observable
        ], Web3Store.prototype, "allowance", void 0);
        __decorate([
            mobx.action.bound
        ], Web3Store.prototype, "updateTokenDetails", null);
        __decorate([
            mobx.action.bound
        ], Web3Store.prototype, "updateInjectedWeb3State", null);
        __decorate([
            mobx.computed
        ], Web3Store.prototype, "erc20", null);
        __decorate([
            mobx.computed
        ], Web3Store.prototype, "activeNetwork", null);
        __decorate([
            mobx.computed
        ], Web3Store.prototype, "reason", null);
        __decorate([
            mobx.computed
        ], Web3Store.prototype, "unlocked", null);
        __decorate([
            mobx.computed
        ], Web3Store.prototype, "ready", null);
        __decorate([
            mobx.computed
        ], Web3Store.prototype, "network", null);
        __decorate([
            mobx.computed
        ], Web3Store.prototype, "token", null);
        __decorate([
            mobx.computed
        ], Web3Store.prototype, "balanceWithDecimalPoint", null);
        __decorate([
            mobx.computed
        ], Web3Store.prototype, "allowanceWithDecimalPoint", null);
        __decorate([
            mobx.computed
        ], Web3Store.prototype, "sendClaim", null);
        __decorate([
            mobx.computed
        ], Web3Store.prototype, "getTransactionReceipt", null);
        return Web3Store;
    }());

    return Web3Store;

})));
