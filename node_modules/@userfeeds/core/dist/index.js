'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var utils = require('web3-utils');
var uuidv4 = _interopDefault(require('uuid/v4'));

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var BN = utils.BN;
var MAX_VALUE_256 = new BN(2)
    .pow(new BN(256))
    .subn(1)
    .toString(10);
var toWei = function (amout, decimals) {
    var parsedDecimals = typeof decimals !== 'number'
        ? parseInt(decimals, 10) // ToDo check this casting
        : decimals;
    var multiplier = new BN(10).pow(new BN(parsedDecimals));
    var _a = amout.toString().split('.'), integral = _a[0], _b = _a[1], rawFraction = _b === void 0 ? '' : _b;
    var fraction = rawFraction.padEnd(parsedDecimals, '0').slice(0, parsedDecimals);
    return new BN(integral)
        .mul(multiplier)
        .add(new BN(fraction))
        .toString(10);
};

var networkMapping = {
    1: 'ethereum',
    3: 'ropsten',
    4: 'rinkeby',
    42: 'kovan',
};
function signTypedData(web3Instance, messageParams, from) {
    return new Promise(function (resolve, reject) {
        var jsonRPCRequest = {
            method: 'eth_signTypedData',
            params: [messageParams, from],
            jsonrpc: '2.0',
            id: new Date().getTime(),
        };
        web3Instance.currentProvider.send(jsonRPCRequest, function (error, result) {
            if (error || result.error) {
                return reject(error || result.error);
            }
            return resolve(result.result);
        });
    });
}
function getBalance(web3Instance) {
    return __awaiter(this, void 0, void 0, function () {
        var account;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    throwIfNotConnected(web3Instance);
                    return [4 /*yield*/, web3Instance.eth.getAccounts()];
                case 1:
                    account = (_a.sent())[0];
                    if (!account) {
                        return [2 /*return*/, ''];
                    }
                    return [2 /*return*/, web3Instance.eth.getBalance(account)];
            }
        });
    });
}
function getBlock(web3Instance, blockNumber) {
    throwIfNotConnected(web3Instance);
    return web3Instance.eth.getBlock(blockNumber);
}
function getBlockNumber(web3Instance) {
    throwIfNotConnected(web3Instance);
    return web3Instance.eth.getBlockNumber();
}
function getCurrentNetworkName(web3Instance) {
    return __awaiter(this, void 0, void 0, function () {
        var networkId;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    throwIfNotConnected(web3Instance);
                    return [4 /*yield*/, web3Instance.eth.net.getId()];
                case 1:
                    networkId = _a.sent();
                    return [2 /*return*/, networkMapping[networkId]];
            }
        });
    });
}
function getAccounts(web3Instance) {
    throwIfNotConnected(web3Instance);
    return web3Instance.eth.getAccounts();
}
function getTransactionReceipt(web3Instance, transactionId) {
    throwIfNotConnected(web3Instance);
    return web3Instance.eth.getTransactionReceipt(transactionId);
}
function resolveOnTransactionHash(p) {
    return new Promise(function (resolve, reject) {
        p.on('error', reject).on('transactionHash', resolve);
    });
}
function throwIfNotConnected(web3Instance) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, web3Instance.eth.net.isListening()];
                case 1:
                    if (!(_a.sent())) {
                        throw Error('web3 is not connected');
                    }
                    return [2 /*return*/];
            }
        });
    });
}

var utils$1 = /*#__PURE__*/Object.freeze({
    networkMapping: networkMapping,
    signTypedData: signTypedData,
    getBalance: getBalance,
    getBlock: getBlock,
    getBlockNumber: getBlockNumber,
    getCurrentNetworkName: getCurrentNetworkName,
    getAccounts: getAccounts,
    getTransactionReceipt: getTransactionReceipt,
    resolveOnTransactionHash: resolveOnTransactionHash
});

var withoutValueTransferContractAddressMapping = {
    ethereum: '0xFd74f0ce337fC692B8c124c094c1386A14ec7901',
    rinkeby: '0xC5De286677AC4f371dc791022218b1c13B72DbBd',
    ropsten: '0x6f32a6F579CFEed1FFfDc562231C957ECC894001',
    kovan: '0x139d658eD55b78e783DbE9bD4eb8F2b977b24153',
};
var valueTransferContractAddressMapping = {
    ethereum: '0x70B610F7072E742d4278eC55C02426Dbaaee388C',
    rinkeby: '0x00034B8397d9400117b4298548EAa59267953F8c',
    ropsten: '0x37C1CA7996CDdAaa31e13AA3eEE0C89Ee4f665B5',
    kovan: '0xc666c75C2bBA9AD8Df402138cE32265ac0EC7aaC',
};
var tokenTransferContractAddressMapping = {
    ethereum: '0xfF8A1BA752fE5df494B02D77525EC6Fa76cecb93',
    rinkeby: '0xBd2A0FF74dE98cFDDe4653c610E0E473137534fB',
    ropsten: '0x54b4372fA0bd76664B48625f0e8c899Ff19DFc39',
    kovan: '0xd6Ede7F43882B100C6311a9dF801088eA91cEb64',
};
function getContractWithoutValueTransfer(web3Instance, networkName) {
    var contractAddress = withoutValueTransferContractAddressMapping[networkName];
    if (!contractAddress) {
        throw new Error('Contract is not available');
    }
    var contract = new web3Instance.eth.Contract(withoutValueTransferAbi, contractAddress);
    contract.setProvider(web3Instance.currentProvider); // ToDo because of bug in web3 1.0.0-beta26
    return contract;
}
var withoutValueTransferAbi = [
    {
        constant: false,
        inputs: [{ name: 'data', type: 'string' }],
        name: 'post',
        outputs: [],
        payable: false,
        type: 'function',
    },
];
function getContractValueTransfer(web3Instance, networkName) {
    var contractAddress = valueTransferContractAddressMapping[networkName];
    if (!contractAddress) {
        throw new Error('Contract is not available');
    }
    var contract = new web3Instance.eth.Contract(valueTransferAbi, contractAddress);
    contract.setProvider(web3Instance.currentProvider); // ToDo because of bug in web3 1.0.0-beta26
    return contract;
}
var valueTransferAbi = [
    {
        constant: false,
        inputs: [{ name: 'userfeed', type: 'address' }, { name: 'data', type: 'string' }],
        name: 'post',
        outputs: [],
        payable: true,
        type: 'function',
    },
];
function getContractTokenTransfer(web3Instance, networkName) {
    var contractAddress = tokenTransferContractAddressMapping[networkName];
    if (!contractAddress) {
        throw new Error('Contract is not available');
    }
    var contract = new web3Instance.eth.Contract(tokenTransferAbi, contractAddress);
    contract.setProvider(web3Instance.currentProvider); // ToDo because of bug in web3 1.0.0-beta26
    return contract;
}
function getContractTokenTransferAddress(networkName) {
    var contractAddress = tokenTransferContractAddressMapping[networkName];
    if (!contractAddress) {
        throw new Error('Contract is not available');
    }
    return contractAddress;
}
var tokenTransferAbi = [
    {
        constant: false,
        inputs: [
            { name: 'userfeed', type: 'address' },
            { name: 'token', type: 'address' },
            { name: 'value', type: 'uint256' },
            { name: 'data', type: 'string' },
        ],
        name: 'post',
        outputs: [],
        payable: false,
        type: 'function',
    },
];
function getErc20Contract(web3Instance, contractAddress) {
    var contract = new web3Instance.eth.Contract(erc20abi, contractAddress);
    contract.setProvider(web3Instance.currentProvider); // ToDo because of bug in web3 1.0.0-beta26
    return contract;
}
var erc20abi = [
    {
        constant: false,
        inputs: [{ name: '_spender', type: 'address' }, { name: '_value', type: 'uint256' }],
        name: 'approve',
        outputs: [{ name: 'success', type: 'bool' }],
        payable: false,
        type: 'function',
    },
    {
        constant: true,
        inputs: [{ name: '_owner', type: 'address' }, { name: '_spender', type: 'address' }],
        name: 'allowance',
        outputs: [{ name: '', type: 'uint256' }],
        payable: false,
        type: 'function',
    },
    {
        constant: true,
        inputs: [{ name: '_owner', type: 'address' }],
        name: 'balanceOf',
        outputs: [{ name: '', type: 'uint256' }],
        payable: false,
        type: 'function',
    },
    {
        constant: true,
        inputs: [],
        name: 'decimals',
        outputs: [{ name: '', type: 'uint8' }],
        payable: false,
        type: 'function',
    },
    {
        constant: true,
        inputs: [],
        name: 'name',
        outputs: [{ name: '', type: 'string' }],
        payable: false,
        type: 'function',
    },
    {
        constant: true,
        inputs: [],
        name: 'symbol',
        outputs: [{ name: '', type: 'string' }],
        payable: false,
        type: 'function',
    },
];

function erc20ContractApprove(web3Instance, contractAddress, spender, value) {
    return __awaiter(this, void 0, void 0, function () {
        var from, contract;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getAccounts(web3Instance)];
                case 1:
                    from = (_a.sent())[0];
                    contract = getErc20Contract(web3Instance, contractAddress);
                    return [2 /*return*/, {
                            promiEvent: contract.methods.approve(spender, value).send({ from: from }),
                        }];
            }
        });
    });
}
function erc20ContractAllowance(web3Instance, contractAddress, spender) {
    return __awaiter(this, void 0, void 0, function () {
        var from, contract;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getAccounts(web3Instance)];
                case 1:
                    from = (_a.sent())[0];
                    contract = getErc20Contract(web3Instance, contractAddress);
                    return [2 /*return*/, contract.methods.allowance(from, spender).call()];
            }
        });
    });
}
function erc20ContractAllowanceForAccount(web3Instance, contractAddress, spender, from) {
    return __awaiter(this, void 0, void 0, function () {
        var contract;
        return __generator(this, function (_a) {
            contract = getErc20Contract(web3Instance, contractAddress);
            return [2 /*return*/, contract.methods.allowance(from, spender).call()];
        });
    });
}
function erc20ContractBalance(web3Instance, contractAddress) {
    return __awaiter(this, void 0, void 0, function () {
        var from, contract;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getAccounts(web3Instance)];
                case 1:
                    from = (_a.sent())[0];
                    contract = getErc20Contract(web3Instance, contractAddress);
                    return [2 /*return*/, contract.methods.balanceOf(from).call()];
            }
        });
    });
}
function erc20ContractBalanceForAccount(web3Instance, contractAddress, from) {
    return __awaiter(this, void 0, void 0, function () {
        var contract;
        return __generator(this, function (_a) {
            contract = getErc20Contract(web3Instance, contractAddress);
            return [2 /*return*/, contract.methods.balanceOf(from).call()];
        });
    });
}
function erc20ContractDecimals(web3Instance, contractAddress) {
    var contract = getErc20Contract(web3Instance, contractAddress);
    return contract.methods.decimals().call();
}
function erc20ContractName(web3Instance, contractAddress) {
    var contract = getErc20Contract(web3Instance, contractAddress);
    return contract.methods.name().call();
}
function erc20ContractSymbol(web3Instance, contractAddress) {
    var contract = getErc20Contract(web3Instance, contractAddress);
    return contract.methods.symbol().call();
}

var erc20 = /*#__PURE__*/Object.freeze({
    erc20ContractApprove: erc20ContractApprove,
    erc20ContractAllowance: erc20ContractAllowance,
    erc20ContractAllowanceForAccount: erc20ContractAllowanceForAccount,
    erc20ContractBalance: erc20ContractBalance,
    erc20ContractBalanceForAccount: erc20ContractBalanceForAccount,
    erc20ContractDecimals: erc20ContractDecimals,
    erc20ContractName: erc20ContractName,
    erc20ContractSymbol: erc20ContractSymbol
});

function sendClaimWithoutValueTransfer(web3Instance, claim) {
    return __awaiter(this, void 0, void 0, function () {
        var networkName, from, contract;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getCurrentNetworkName(web3Instance)];
                case 1:
                    networkName = _a.sent();
                    return [4 /*yield*/, getAccounts(web3Instance)];
                case 2:
                    from = (_a.sent())[0];
                    contract = getContractWithoutValueTransfer(web3Instance, networkName);
                    return [2 /*return*/, {
                            promiEvent: contract.methods.post(JSON.stringify(claim)).send({ from: from }),
                        }];
            }
        });
    });
}
function sendClaimValueTransfer(web3Instance, address, value, claim) {
    return __awaiter(this, void 0, void 0, function () {
        var networkName, from, contract;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getCurrentNetworkName(web3Instance)];
                case 1:
                    networkName = _a.sent();
                    return [4 /*yield*/, getAccounts(web3Instance)];
                case 2:
                    from = (_a.sent())[0];
                    contract = getContractValueTransfer(web3Instance, networkName);
                    return [2 /*return*/, {
                            promiEvent: contract.methods.post(address, JSON.stringify(claim)).send({ from: from, value: toWei(value, 18) }),
                        }];
            }
        });
    });
}
function approveUserfeedsContractTokenTransfer(web3Instance, tokenContractAddress, value) {
    return __awaiter(this, void 0, void 0, function () {
        var networkName, spenderContractAddress;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getCurrentNetworkName(web3Instance)];
                case 1:
                    networkName = _a.sent();
                    spenderContractAddress = getContractTokenTransferAddress(networkName);
                    return [2 /*return*/, erc20ContractApprove(web3Instance, tokenContractAddress, spenderContractAddress, value)];
            }
        });
    });
}
function allowanceUserfeedsContractTokenTransfer(web3Instance, tokenContractAddress) {
    return __awaiter(this, void 0, void 0, function () {
        var networkName, spenderContractAddress;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getCurrentNetworkName(web3Instance)];
                case 1:
                    networkName = _a.sent();
                    spenderContractAddress = getContractTokenTransferAddress(networkName);
                    return [2 /*return*/, erc20ContractAllowance(web3Instance, tokenContractAddress, spenderContractAddress)];
            }
        });
    });
}
function allowanceUserfeedsContractTokenTransferForAccount(web3Instance, networkName, tokenContractAddress, from) {
    return __awaiter(this, void 0, void 0, function () {
        var spenderContractAddress;
        return __generator(this, function (_a) {
            spenderContractAddress = getContractTokenTransferAddress(networkName);
            return [2 /*return*/, erc20ContractAllowanceForAccount(web3Instance, tokenContractAddress, spenderContractAddress, from)];
        });
    });
}
function sendClaimTokenTransferImpl(web3Instance, address, token, value, claim) {
    return __awaiter(this, void 0, void 0, function () {
        var networkName, from, contract;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getCurrentNetworkName(web3Instance)];
                case 1:
                    networkName = _a.sent();
                    return [4 /*yield*/, getAccounts(web3Instance)];
                case 2:
                    from = (_a.sent())[0];
                    contract = getContractTokenTransfer(web3Instance, networkName);
                    return [2 /*return*/, {
                            promiEvent: contract.methods.post(address, token, value, JSON.stringify(claim)).send({ from: from }),
                        }];
            }
        });
    });
}
function sendClaimTokenTransfer(web3Instance, recipientAddress, token, value, claim) {
    return __awaiter(this, void 0, void 0, function () {
        var decimals, tokenWei;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, erc20ContractDecimals(web3Instance, token)];
                case 1:
                    decimals = _a.sent();
                    tokenWei = toWei(value, decimals);
                    return [2 /*return*/, sendClaimTokenTransferImpl(web3Instance, recipientAddress, token, tokenWei, claim)];
            }
        });
    });
}

var claims = /*#__PURE__*/Object.freeze({
    sendClaimWithoutValueTransfer: sendClaimWithoutValueTransfer,
    sendClaimValueTransfer: sendClaimValueTransfer,
    approveUserfeedsContractTokenTransfer: approveUserfeedsContractTokenTransfer,
    allowanceUserfeedsContractTokenTransfer: allowanceUserfeedsContractTokenTransfer,
    allowanceUserfeedsContractTokenTransferForAccount: allowanceUserfeedsContractTokenTransferForAccount,
    sendClaimTokenTransferImpl: sendClaimTokenTransferImpl,
    sendClaimTokenTransfer: sendClaimTokenTransfer
});

var USERFEEDS_API_ADDRESS = 'https://api.userfeeds.io';
function sendClaim(web3Instance, claim) {
    return __awaiter(this, void 0, void 0, function () {
        var from, wrappedClaim, signatureValue, body, response, id;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getAccounts(web3Instance)];
                case 1:
                    from = (_a.sent())[0];
                    wrappedClaim = JSON.stringify({ data: claim, creator: from.toLowerCase(), nonce: uuidv4() });
                    return [4 /*yield*/, web3Instance.eth.personal.sign(wrappedClaim, from)];
                case 2:
                    signatureValue = _a.sent();
                    body = JSON.stringify({ data: wrappedClaim, signatureValue: signatureValue, signatureType: 'ethereum:personal:sign' });
                    return [4 /*yield*/, fetch(USERFEEDS_API_ADDRESS + "/api/create-claim", {
                            method: 'POST',
                            body: body,
                            headers: {
                                'Content-Type': 'application/json',
                            },
                        })];
                case 3:
                    response = _a.sent();
                    return [4 /*yield*/, response.text()];
                case 4:
                    id = _a.sent();
                    return [2 /*return*/, id];
            }
        });
    });
}

var http = /*#__PURE__*/Object.freeze({
    sendClaim: sendClaim
});

var index = {
    ethereum: {
        claims: claims,
        erc20: erc20,
    },
    http: http,
    utils: utils$1,
};

module.exports = index;
